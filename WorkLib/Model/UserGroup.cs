//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorkLib.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using WorkLib.Data;

    /// <summary>
    /// User group type
    /// 0: Administrators
    /// 1: Users
    /// </summary>
    public enum GroupType : byte
    {
        /// <summary>
        /// The administrators
        /// </summary>
        Administrators = 0,
        /// <summary>
        /// The users
        /// </summary>
        Users = 1
    }

    /// <summary>User group object</summary>
    public partial class UserGroup : Entity<UserGroup>
    {
        /// <summary>Initializes a new instance of the <see cref="UserGroup" /> class.</summary>
        public UserGroup(object data) : base(data)
        { }

        /// <summary>Gets or sets the user group identifier.</summary>
        /// <value>The user group identifier.</value>
        [Key]
        [Display(Name = "Id")]
        public int UserGroupId { get; set; }
        /// <summary>Gets or sets the name of the group.</summary>
        /// <value>The name of the group.</value>
        [Required(ErrorMessage = "Group name is required.")]
        [Display(Name = "Name")]
        public string GroupName { get; set; }
        /// <summary>Gets or sets a value indicating whether [group type].
        /// 0 - administrators; 1 - users</summary>
        /// <value>
        ///   <c>true</c> if [group type]; otherwise, <c>false</c>.</value>
        [Required(ErrorMessage = "Group type is required.")]
        [RegularExpression("[0,1]", ErrorMessage = "Only values 0 (administrators) or 1 (users) are enabled.")]
        [Display(Name = "Type")]
        public GroupType GroupType { get; set; }

        public override void Delete(DbContext context = null)
        {
            throw new NotImplementedException();
        }

        public override void Save(DbContext context = null)
        {
            throw new NotImplementedException();
        }
    }

}
